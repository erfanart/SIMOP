#include <drogon/drogon.h>
#include <csignal>
#include <unistd.h>
#include <iostream>
#include <vector>
#include <cstring>

void restartApp()
{
    std::cout << "Restarting app...\n";

    // Prepare args for exec
    // Assuming argv[0] is the executable path
    extern char **environ;
    static char *argv[] = {nullptr}; // placeholder, will override in main

    // Get executable path from /proc/self/exe
    char exePath[1024];
    ssize_t len = readlink("/proc/self/exe", exePath, sizeof(exePath)-1);
    if (len == -1)
    {
        std::cerr << "Failed to get executable path\n";
        return;
    }
    exePath[len] = '\0';

    // Prepare args
    char *args[] = {exePath, nullptr};

    // Fork + exec
    pid_t pid = fork();
    if (pid == 0)
    {
        // Child process: exec new instance
        execve(exePath, args, environ);
        // If execve returns, error happened
        std::cerr << "execve failed\n";
        _exit(1);
    }
    else if (pid > 0)
    {
        // Parent process: quit app (stop Drogon)
        drogon::app().quit();
    }
    else
    {
        std::cerr << "fork failed\n";
    }
}

int main(int argc, char *argv[])
{
    // Load config
    drogon::app().loadConfigFile("./config.yaml");

    // Signal handlers
    std::signal(SIGINT, [](int) {
        std::cout << "SIGINT received: stopping app.\n";
        drogon::app().quit();
    });

    std::signal(SIGTERM, [](int) {
        std::cout << "SIGTERM received: stopping app.\n";
        drogon::app().quit();
    });

    std::signal(SIGHUP, [](int) {
        std::cout << "SIGHUP received: restarting app.\n";
        restartApp();
    });

    drogon::app().run();
    return 0;
}
